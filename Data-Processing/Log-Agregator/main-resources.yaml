AWSTemplateFormatVersion: 2010-09-09
Description: Main resources to aggregate L@E Logs

Parameters:
  Stage:
    Type: String
  EdgeFunction:
    Type: String
    Description: Lambda@Edge Function Name

Resources:

  # EdgeAuthParameter:
  #   Type: "AWS::SSM::Parameter"
  #   Properties:
  #     Name: !Sub /${Stage}/service/auth/edgeAuthFunctionName
  #     Description: Edge Auth Lambda function name
  #     Type: String
  #     Value: !Ref EdgeAuthFunction
  
# Lambda@Edge Log aggregate
  AggregateS3Bucket:
    Type: AWS::S3::Bucket

  EdgeLogsKinesisFirehoseStreamRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            -
                Effect: Allow
                Principal:
                    Service: firehose.amazonaws.com
                Action: 'sts:AssumeRole'
        Policies:
          -
            PolicyName: kinesis_delivery_lambda_edge
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                -
                    Effect: Allow
                    Action:
                        - 's3:AbortMultipartUpload'
                        - 's3:GetBucketLocation'
                        - 's3:GetObject'
                        - 's3:ListBucket'
                        - 's3:ListBucketMultipartUploads'
                        - 's3:PutObject'
                    Resource:
                    - !Sub "${AggregateS3Bucket.Arn}"
                    - !Sub "${AggregateS3Bucket.Arn}/*"
                # NOTE: Enable it if you attach Kinesis Data Streams to Firehose
                # -
                #     Effect: Allow
                #     Action:
                #         - 'kinesis:DescribeStream'
                #         - 'kinesis:GetShardIterator'
                #         - 'kinesis:GetRecords'
                #         - 'kinesis:ListShards'
                #     Resource: '*'
                # NOTE: Enable it if you enable Log delivery in Kinesis Firehose
                # NOTE2: We need both Log Group and Stream created upfront
                # -
                #     Effect: Allow
                #     Action:
                #         - 'logs:PutLogEvents'
                #     Resource: !Sub KinesisFirehoseCloudWatchLogGroup.Arn


  EdgeLogsKinesisFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub "arn:aws:s3:::${AggregateS3Bucket}"
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 3
        CompressionFormat: UNCOMPRESSED
        Prefix: processed/
        ErrorOutputPrefix: failed/
        RoleARN: !GetAtt EdgeLogsKinesisFirehoseStreamRole.Arn

  CloudwatchSubscriptionFiltersRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            -
                Effect: Allow
                Principal:
                    Service:
                      - logs.us-east-1.amazonaws.com
                      - logs.us-west-2.amazonaws.com
                      - logs.us-east-2.amazonaws.com
                      - logs.eu-central-1.amazonaws.com
                      - logs.eu-west-1.amazonaws.com
                      - logs.eu-west-2.amazonaws.com
                      - logs.eu-central-1.amazonaws.com
                      - logs.ap-south-1.amazonaws.com
                      - logs.ap-southeast-1.amazonaws.com
                      - logs.ap-southeast-2.amazonaws.com
                      - logs.ap-northeast-1.amazonaws.com
                      - logs.ap-northeast-2.amazonaws.com
                      - logs.sa-east-1.amazonaws.com
                Action: 'sts:AssumeRole'

  CloudwatchSubscriptionFilterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_subscription_filter
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
              - 'kinesis:PutRecord'
              - 'firehose:PutRecord'
              - 'firehose:PutRecordBatch'
          Resource: !Sub ${EdgeLogsKinesisFirehoseStream.Arn}
        - Effect: Allow
          Action: 'iam:PassRole'
          Resource: !Sub ${CloudwatchSubscriptionFiltersRole.Arn}
      Roles:
        -
          Ref: CloudwatchSubscriptionFiltersRole

  CloudWatchSubscriptionRoleParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${Stage}/service/auth/cloudwatchSubscriptionRole
      Description: CloudWatch IAM Role used for cross-region logs ingestion to Kinesis Firehose
      Type: String
      Value: !Sub ${CloudwatchSubscriptionFiltersRole.Arn}

  KinesisFirehoseDeliveryParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${Stage}/service/auth/firehoseStream
      Description: Kinesis Firehose Delivery Stream ARN
      Type: String
      Value: !Sub ${EdgeLogsKinesisFirehoseStream.Arn}

  EdgeLogsAggregateS3BucketParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub /${Stage}/service/auth/logsBucket
      Description: S3 Bucket where Lambda@Edge Logs are aggregated
      Type: String
      Value: !Ref AggregateS3Bucket

  CloudformationStackSetAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole"

  CloudformationStackSetExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StackSet-Execution-Admin0Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

Outputs :

  AggregateS3BucketDomainName:
    Description: S3 bucket domain name
    Value: !Sub ${AggregateS3Bucket}
  EdgeLogsKinesisFirehoseStreamArn:
    Description: Kinesis Delivery Stream
    Value: !Sub ${EdgeLogsKinesisFirehoseStream.Arn}
  CloudwatchSubscriptionFiltersRole:
    Description: CloudWatch role for subscription filters
    Value: !Sub ${CloudwatchSubscriptionFiltersRole.Arn}